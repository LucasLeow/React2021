Keywords:
	- Components in React 
	- React "props" concept 



== Components in React ==
	- User Interface in React = Sum of all React Components
	- Components are JS functions that return JSX expressions
	- Function-based Components (Current) & Class-based Components (Past)
	- Each component typically have 2 files:
		- .js file (main logic)
		- .css file (to style component)
	

2 ways to export function-based Components:

		1) 
		
			export default function App() {
				...
			}
	
		2) 
			function App () {
				...
			}
			
			export default App;
			

== Typical way of doing things ==

	1) App.js (App Component) used to compile the different components
		- all other components imported into App Component (Root component)
	2) index.js will only render App.js
	
				Inside App.js: (Integration for all components)
				
				import './App.css';
				import Header from "./components/Header/Header";
				
				export default function App() {
					return (
						<div className="App">
							<Header /> // Header.js file
						</div>
					)
				}
	
	
	3) inside "src" dir, create "components" dir
	4) inside "component" dir, create "Header" dir & "Nav" dir
	5) inside "Header" dir, create Header.js & Header.css etc.
		(Can also create App folder and place App.js & App.css inside)
	

		Inside Header.js:
		
		import "./Header.css";
		import Nav from "../Nav/Nav";

		export default function Header() {
			return (
				<header className="header1">
					<Nav />
					Company Name
				</header>
			)
		}
		
		
		Inside Header.css:
		
		.header1 {
			color: gold;
			background-color:navy;
			padding: 1rem;
			border-radius: 1rem;
			border: 1px solid gold;
		}
		
	
	6) inside "Nav" dir, create Nav.js & Nav.css
	
		import "./Nav.css";

		export default function Nav() {
			return (
				<nav>
					<ul className="navigation">
						<li><a href="/">Home</a></li>
						<li><a href="/">About</a></li>
						<li><a href="/">Contact</a></li>
					</ul>
				</nav>
			)
		}
		
		
		Inside Nav.css:
		
		a:link, a:visited {
			background-color: white;
			color: black;
			border: 1px solid green;
			text-align: center;
			text-decoration: none;
			padding: .5rem;
			border-radius:1rem;
		}

		ul {
			list-style-type: none;
			display: flex;
			justify-content: center;
			gap:2rem;
		}
	



== React "props" concept ==

	- properties passed from parent component to child component
	
	- eg: All components rendered within App() Component
		- App() component is the parent
		- Header() component is the child
		
	- inside parent, props passed as attribute in html tag: <Header newProp={"myProp"}/>
		- newProp is arbitrary name
		- "myProp" is a string passed to child. In reality, prop can be of any type, typically JS Object
	
	- inside child, props received as argument in component function
	- eg: function Header(props) 	
			return (
				<div>
					{props.newProp}
				</div>
				)

		- props is naming convention, can actually be any other name
		
		
		Worked example:

		Inside App.js: (Passing Prop to child <Header>)
		
			import './App.css';
			import Header from "./components/Header/Header";

			function App() {
			
			const name = "Company Name";
			
			  return (
				<div className="App">
					<Header company={name}/>    <!-- prop called company passed to header -->
				</div>
			  );
			}

			export default App;
		
		
		Inside Header.js (Property received from parent <App>)
		
		import "./Header.css";
		import Nav from "../Nav/Nav";

		export default function Header(props) {
			return (
				<header className="header1">
					<Nav />
					{props.company}
				</header>
			)
		}
		
	

	== Prop Drilling ==
		- Passing of props down the DOM hierarchy
		
		eg:
		
		In App.js
		
			// Header component
			<Header name="Lucas"/> 
		
		In Header.js
		
			export default function Header(props) {
				return (
					<Nav nav_nm={props.name}/>
				)
			}
			
		In Nav.js
		
			export default function Nav(props) {
				return (
					<h1> Drilled Prop Name: {props.nav_nm} </h1>
				)
			}
			
			
		* May become complicated if many props involved
			- context-api can be used to resolve this issue
		
	